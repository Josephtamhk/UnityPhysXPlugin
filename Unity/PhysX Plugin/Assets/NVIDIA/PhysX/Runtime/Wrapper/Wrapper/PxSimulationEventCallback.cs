//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxSimulationEventCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxSimulationEventCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSimulationEventCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxSimulationEventCallback() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxSimulationEventCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxSimulationEventCallback() : this(NativePINVOKE.new_PxSimulationEventCallback(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual void onConstraintBreak(PxConstraintInfoList constraints) {
    if (SwigDerivedClassHasMethod("onConstraintBreak", swigMethodTypes0)) NativePINVOKE.PxSimulationEventCallback_onConstraintBreakSwigExplicitPxSimulationEventCallback(swigCPtr, PxConstraintInfoList.getCPtr(constraints)); else NativePINVOKE.PxSimulationEventCallback_onConstraintBreak(swigCPtr, PxConstraintInfoList.getCPtr(constraints));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onWake(PxActorList actors) {
    if (SwigDerivedClassHasMethod("onWake", swigMethodTypes1)) NativePINVOKE.PxSimulationEventCallback_onWakeSwigExplicitPxSimulationEventCallback(swigCPtr, PxActorList.getCPtr(actors)); else NativePINVOKE.PxSimulationEventCallback_onWake(swigCPtr, PxActorList.getCPtr(actors));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onSleep(PxActorList actors) {
    if (SwigDerivedClassHasMethod("onSleep", swigMethodTypes2)) NativePINVOKE.PxSimulationEventCallback_onSleepSwigExplicitPxSimulationEventCallback(swigCPtr, PxActorList.getCPtr(actors)); else NativePINVOKE.PxSimulationEventCallback_onSleep(swigCPtr, PxActorList.getCPtr(actors));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onContact(PxContactPairHeader pairHeader, PxContactPairList pairs) {
    if (SwigDerivedClassHasMethod("onContact", swigMethodTypes3)) NativePINVOKE.PxSimulationEventCallback_onContactSwigExplicitPxSimulationEventCallback(swigCPtr, PxContactPairHeader.getCPtr(pairHeader), PxContactPairList.getCPtr(pairs)); else NativePINVOKE.PxSimulationEventCallback_onContact(swigCPtr, PxContactPairHeader.getCPtr(pairHeader), PxContactPairList.getCPtr(pairs));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTrigger(PxTriggerPairList pairs) {
    if (SwigDerivedClassHasMethod("onTrigger", swigMethodTypes4)) NativePINVOKE.PxSimulationEventCallback_onTriggerSwigExplicitPxSimulationEventCallback(swigCPtr, PxTriggerPairList.getCPtr(pairs)); else NativePINVOKE.PxSimulationEventCallback_onTrigger(swigCPtr, PxTriggerPairList.getCPtr(pairs));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onAdvance(PxRigidBodyList bodyBuffer, PxTransformList poseBuffer) {
    if (SwigDerivedClassHasMethod("onAdvance", swigMethodTypes5)) NativePINVOKE.PxSimulationEventCallback_onAdvanceSwigExplicitPxSimulationEventCallback(swigCPtr, PxRigidBodyList.getCPtr(bodyBuffer), PxTransformList.getCPtr(poseBuffer)); else NativePINVOKE.PxSimulationEventCallback_onAdvance(swigCPtr, PxRigidBodyList.getCPtr(bodyBuffer), PxTransformList.getCPtr(poseBuffer));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    global::System.IntPtr swigDelegate0gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onConstraintBreak", swigMethodTypes0)) {
      swigDelegate0 = new SwigDelegatePxSimulationEventCallback_0(SwigDirectoronConstraintBreak);
      swigDelegate0dispatcher = new SwigDelegatePxSimulationEventCallback_0_Dispatcher(SwigDirectoronConstraintBreak_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate0gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate0, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate0gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate0gcHandle);
    }
    global::System.IntPtr swigDelegate1gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onWake", swigMethodTypes1)) {
      swigDelegate1 = new SwigDelegatePxSimulationEventCallback_1(SwigDirectoronWake);
      swigDelegate1dispatcher = new SwigDelegatePxSimulationEventCallback_1_Dispatcher(SwigDirectoronWake_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate1gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate1, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate1gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate1gcHandle);
    }
    global::System.IntPtr swigDelegate2gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onSleep", swigMethodTypes2)) {
      swigDelegate2 = new SwigDelegatePxSimulationEventCallback_2(SwigDirectoronSleep);
      swigDelegate2dispatcher = new SwigDelegatePxSimulationEventCallback_2_Dispatcher(SwigDirectoronSleep_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate2gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate2, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate2gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate2gcHandle);
    }
    global::System.IntPtr swigDelegate3gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onContact", swigMethodTypes3)) {
      swigDelegate3 = new SwigDelegatePxSimulationEventCallback_3(SwigDirectoronContact);
      swigDelegate3dispatcher = new SwigDelegatePxSimulationEventCallback_3_Dispatcher(SwigDirectoronContact_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate3gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate3, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate3gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate3gcHandle);
    }
    global::System.IntPtr swigDelegate4gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onTrigger", swigMethodTypes4)) {
      swigDelegate4 = new SwigDelegatePxSimulationEventCallback_4(SwigDirectoronTrigger);
      swigDelegate4dispatcher = new SwigDelegatePxSimulationEventCallback_4_Dispatcher(SwigDirectoronTrigger_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate4gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate4, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate4gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate4gcHandle);
    }
    global::System.IntPtr swigDelegate5gcHandlePtr = global::System.IntPtr.Zero;
    if (SwigDerivedClassHasMethod("onAdvance", swigMethodTypes5)) {
      swigDelegate5 = new SwigDelegatePxSimulationEventCallback_5(SwigDirectoronAdvance);
      swigDelegate5dispatcher = new SwigDelegatePxSimulationEventCallback_5_Dispatcher(SwigDirectoronAdvance_Dispatcher);
      global::System.Runtime.InteropServices.GCHandle swigDelegate5gcHandle = global::System.Runtime.InteropServices.GCHandle.Alloc(swigDelegate5, global::System.Runtime.InteropServices.GCHandleType.Weak);
      swigDelegate5gcHandlePtr = global::System.Runtime.InteropServices.GCHandle.ToIntPtr(swigDelegate5gcHandle);
    }
    NativePINVOKE.PxSimulationEventCallback_director_connect(swigCPtr, swigDelegate0dispatcher, swigDelegate0gcHandlePtr, swigDelegate1dispatcher, swigDelegate1gcHandlePtr, swigDelegate2dispatcher, swigDelegate2gcHandlePtr, swigDelegate3dispatcher, swigDelegate3gcHandlePtr, swigDelegate4dispatcher, swigDelegate4gcHandlePtr, swigDelegate5dispatcher, swigDelegate5gcHandlePtr);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PxSimulationEventCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectoronConstraintBreak(global::System.IntPtr constraints) {
    onConstraintBreak(new PxConstraintInfoList(constraints, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_0_Dispatcher))]
  private static void SwigDirectoronConstraintBreak_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_0_Handle, global::System.IntPtr constraints) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_0_Handle);
    SwigDelegatePxSimulationEventCallback_0 delegateSwigDelegatePxSimulationEventCallback_0 = (SwigDelegatePxSimulationEventCallback_0) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_0(constraints);
  }

  private void SwigDirectoronWake(global::System.IntPtr actors) {
    onWake(new PxActorList(actors, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_1_Dispatcher))]
  private static void SwigDirectoronWake_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_1_Handle, global::System.IntPtr actors) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_1_Handle);
    SwigDelegatePxSimulationEventCallback_1 delegateSwigDelegatePxSimulationEventCallback_1 = (SwigDelegatePxSimulationEventCallback_1) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_1(actors);
  }

  private void SwigDirectoronSleep(global::System.IntPtr actors) {
    onSleep(new PxActorList(actors, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_2_Dispatcher))]
  private static void SwigDirectoronSleep_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_2_Handle, global::System.IntPtr actors) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_2_Handle);
    SwigDelegatePxSimulationEventCallback_2 delegateSwigDelegatePxSimulationEventCallback_2 = (SwigDelegatePxSimulationEventCallback_2) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_2(actors);
  }

  private void SwigDirectoronContact(global::System.IntPtr pairHeader, global::System.IntPtr pairs) {
    onContact(new PxContactPairHeader(pairHeader, false), new PxContactPairList(pairs, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_3_Dispatcher))]
  private static void SwigDirectoronContact_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_3_Handle, global::System.IntPtr pairHeader, global::System.IntPtr pairs) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_3_Handle);
    SwigDelegatePxSimulationEventCallback_3 delegateSwigDelegatePxSimulationEventCallback_3 = (SwigDelegatePxSimulationEventCallback_3) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_3(pairHeader, pairs);
  }

  private void SwigDirectoronTrigger(global::System.IntPtr pairs) {
    onTrigger(new PxTriggerPairList(pairs, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_4_Dispatcher))]
  private static void SwigDirectoronTrigger_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_4_Handle, global::System.IntPtr pairs) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_4_Handle);
    SwigDelegatePxSimulationEventCallback_4 delegateSwigDelegatePxSimulationEventCallback_4 = (SwigDelegatePxSimulationEventCallback_4) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_4(pairs);
  }

  private void SwigDirectoronAdvance(global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer) {
    onAdvance(new PxRigidBodyList(bodyBuffer, false), new PxTransformList(poseBuffer, false));
  }

  [NativePINVOKE.MonoPInvokeCallback(typeof(SwigDelegatePxSimulationEventCallback_5_Dispatcher))]
  private static void SwigDirectoronAdvance_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_5_Handle, global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer) {
    global::System.Runtime.InteropServices.GCHandle gcHandle = global::System.Runtime.InteropServices.GCHandle.FromIntPtr(swigDelegatePxSimulationEventCallback_5_Handle);
    SwigDelegatePxSimulationEventCallback_5 delegateSwigDelegatePxSimulationEventCallback_5 = (SwigDelegatePxSimulationEventCallback_5) gcHandle.Target;
delegateSwigDelegatePxSimulationEventCallback_5(bodyBuffer, poseBuffer);
  }

  public delegate void SwigDelegatePxSimulationEventCallback_0(global::System.IntPtr constraints);
  public delegate void SwigDelegatePxSimulationEventCallback_1(global::System.IntPtr actors);
  public delegate void SwigDelegatePxSimulationEventCallback_2(global::System.IntPtr actors);
  public delegate void SwigDelegatePxSimulationEventCallback_3(global::System.IntPtr pairHeader, global::System.IntPtr pairs);
  public delegate void SwigDelegatePxSimulationEventCallback_4(global::System.IntPtr pairs);
  public delegate void SwigDelegatePxSimulationEventCallback_5(global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer);

  private SwigDelegatePxSimulationEventCallback_0 swigDelegate0;
  private SwigDelegatePxSimulationEventCallback_1 swigDelegate1;
  private SwigDelegatePxSimulationEventCallback_2 swigDelegate2;
  private SwigDelegatePxSimulationEventCallback_3 swigDelegate3;
  private SwigDelegatePxSimulationEventCallback_4 swigDelegate4;
  private SwigDelegatePxSimulationEventCallback_5 swigDelegate5;

  public delegate void SwigDelegatePxSimulationEventCallback_0_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_0_Handle, global::System.IntPtr constraints);
  public delegate void SwigDelegatePxSimulationEventCallback_1_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_1_Handle, global::System.IntPtr actors);
  public delegate void SwigDelegatePxSimulationEventCallback_2_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_2_Handle, global::System.IntPtr actors);
  public delegate void SwigDelegatePxSimulationEventCallback_3_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_3_Handle, global::System.IntPtr pairHeader, global::System.IntPtr pairs);
  public delegate void SwigDelegatePxSimulationEventCallback_4_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_4_Handle, global::System.IntPtr pairs);
  public delegate void SwigDelegatePxSimulationEventCallback_5_Dispatcher(global::System.IntPtr swigDelegatePxSimulationEventCallback_5_Handle, global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer);

  private SwigDelegatePxSimulationEventCallback_0_Dispatcher swigDelegate0dispatcher;
  private SwigDelegatePxSimulationEventCallback_1_Dispatcher swigDelegate1dispatcher;
  private SwigDelegatePxSimulationEventCallback_2_Dispatcher swigDelegate2dispatcher;
  private SwigDelegatePxSimulationEventCallback_3_Dispatcher swigDelegate3dispatcher;
  private SwigDelegatePxSimulationEventCallback_4_Dispatcher swigDelegate4dispatcher;
  private SwigDelegatePxSimulationEventCallback_5_Dispatcher swigDelegate5dispatcher;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(PxConstraintInfoList) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(PxActorList) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(PxActorList) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(PxContactPairHeader), typeof(PxContactPairList) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(PxTriggerPairList) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(PxRigidBodyList), typeof(PxTransformList) };
}

}

// //------------------------------------------------------------------------------
// // <auto-generated />
// //
// // This file was automatically generated by SWIG (http://www.swig.org).
// // Version 4.0.2
// //
// // Do not make changes to this file unless you know what you are doing--modify
// // the SWIG interface file instead.
// //------------------------------------------------------------------------------
//
// namespace NVIDIA.PhysX {
//
// public partial class PxSimulationEventCallback {
//   private global::System.Runtime.InteropServices.HandleRef swigCPtr;
//   protected bool swigCMemOwn;
//
//   internal PxSimulationEventCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
//     swigCMemOwn = cMemoryOwn;
//     swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
//   }
//
//   internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSimulationEventCallback obj) {
//     return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
//   }
//
//   ~PxSimulationEventCallback() {
//     destroy();
//   }
//
//   public virtual void destroy() {
//     lock(this) {
//       if (swigCPtr.Handle != global::System.IntPtr.Zero) {
//         if (swigCMemOwn) {
//           swigCMemOwn = false;
//           NativePINVOKE.delete_PxSimulationEventCallback(swigCPtr);
//         }
//         swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
//       }
//       global::System.GC.SuppressFinalize(this);
//     }
//   }
//
//   public PxSimulationEventCallback() : this(NativePINVOKE.new_PxSimulationEventCallback(), true) {
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//     SwigDirectorConnect();
//   }
//
//   public virtual void onConstraintBreak(PxConstraintInfoList constraints) {
//     if (SwigDerivedClassHasMethod("onConstraintBreak", swigMethodTypes0)) NativePINVOKE.PxSimulationEventCallback_onConstraintBreakSwigExplicitPxSimulationEventCallback(swigCPtr, PxConstraintInfoList.getCPtr(constraints)); else NativePINVOKE.PxSimulationEventCallback_onConstraintBreak(swigCPtr, PxConstraintInfoList.getCPtr(constraints));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   public virtual void onWake(PxActorList actors) {
//     if (SwigDerivedClassHasMethod("onWake", swigMethodTypes1)) NativePINVOKE.PxSimulationEventCallback_onWakeSwigExplicitPxSimulationEventCallback(swigCPtr, PxActorList.getCPtr(actors)); else NativePINVOKE.PxSimulationEventCallback_onWake(swigCPtr, PxActorList.getCPtr(actors));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   public virtual void onSleep(PxActorList actors) {
//     if (SwigDerivedClassHasMethod("onSleep", swigMethodTypes2)) NativePINVOKE.PxSimulationEventCallback_onSleepSwigExplicitPxSimulationEventCallback(swigCPtr, PxActorList.getCPtr(actors)); else NativePINVOKE.PxSimulationEventCallback_onSleep(swigCPtr, PxActorList.getCPtr(actors));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   public virtual void onContact(PxContactPairHeader pairHeader, PxContactPairList pairs) {
//     if (SwigDerivedClassHasMethod("onContact", swigMethodTypes3)) NativePINVOKE.PxSimulationEventCallback_onContactSwigExplicitPxSimulationEventCallback(swigCPtr, PxContactPairHeader.getCPtr(pairHeader), PxContactPairList.getCPtr(pairs)); else NativePINVOKE.PxSimulationEventCallback_onContact(swigCPtr, PxContactPairHeader.getCPtr(pairHeader), PxContactPairList.getCPtr(pairs));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   public virtual void onTrigger(PxTriggerPairList pairs) {
//     if (SwigDerivedClassHasMethod("onTrigger", swigMethodTypes4)) NativePINVOKE.PxSimulationEventCallback_onTriggerSwigExplicitPxSimulationEventCallback(swigCPtr, PxTriggerPairList.getCPtr(pairs)); else NativePINVOKE.PxSimulationEventCallback_onTrigger(swigCPtr, PxTriggerPairList.getCPtr(pairs));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   public virtual void onAdvance(PxRigidBodyList bodyBuffer, PxTransformList poseBuffer) {
//     if (SwigDerivedClassHasMethod("onAdvance", swigMethodTypes5)) NativePINVOKE.PxSimulationEventCallback_onAdvanceSwigExplicitPxSimulationEventCallback(swigCPtr, PxRigidBodyList.getCPtr(bodyBuffer), PxTransformList.getCPtr(poseBuffer)); else NativePINVOKE.PxSimulationEventCallback_onAdvance(swigCPtr, PxRigidBodyList.getCPtr(bodyBuffer), PxTransformList.getCPtr(poseBuffer));
//     if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
//   }
//
//   private void SwigDirectorConnect() {
//     if (SwigDerivedClassHasMethod("onConstraintBreak", swigMethodTypes0))
//       swigDelegate0 = new SwigDelegatePxSimulationEventCallback_0(SwigDirectorMethodonConstraintBreak);
//     if (SwigDerivedClassHasMethod("onWake", swigMethodTypes1))
//       swigDelegate1 = new SwigDelegatePxSimulationEventCallback_1(SwigDirectorMethodonWake);
//     if (SwigDerivedClassHasMethod("onSleep", swigMethodTypes2))
//       swigDelegate2 = new SwigDelegatePxSimulationEventCallback_2(SwigDirectorMethodonSleep);
//     if (SwigDerivedClassHasMethod("onContact", swigMethodTypes3))
//       swigDelegate3 = new SwigDelegatePxSimulationEventCallback_3(SwigDirectorMethodonContact);
//     if (SwigDerivedClassHasMethod("onTrigger", swigMethodTypes4))
//       swigDelegate4 = new SwigDelegatePxSimulationEventCallback_4(SwigDirectorMethodonTrigger);
//     if (SwigDerivedClassHasMethod("onAdvance", swigMethodTypes5))
//       swigDelegate5 = new SwigDelegatePxSimulationEventCallback_5(SwigDirectorMethodonAdvance);
//     NativePINVOKE.PxSimulationEventCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
//   }
//
//   private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
//     global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
//     bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PxSimulationEventCallback));
//     return hasDerivedMethod;
//   }
//
//   private void SwigDirectorMethodonConstraintBreak(global::System.IntPtr constraints) {
//     onConstraintBreak(new PxConstraintInfoList(constraints, false));
//   }
//
//   private void SwigDirectorMethodonWake(global::System.IntPtr actors) {
//     onWake(new PxActorList(actors, false));
//   }
//
//   private void SwigDirectorMethodonSleep(global::System.IntPtr actors) {
//     onSleep(new PxActorList(actors, false));
//   }
//
//   private void SwigDirectorMethodonContact(global::System.IntPtr pairHeader, global::System.IntPtr pairs) {
//     onContact(new PxContactPairHeader(pairHeader, false), new PxContactPairList(pairs, false));
//   }
//
//   private void SwigDirectorMethodonTrigger(global::System.IntPtr pairs) {
//     onTrigger(new PxTriggerPairList(pairs, false));
//   }
//
//   private void SwigDirectorMethodonAdvance(global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer) {
//     onAdvance(new PxRigidBodyList(bodyBuffer, false), new PxTransformList(poseBuffer, false));
//   }
//
//   public delegate void SwigDelegatePxSimulationEventCallback_0(global::System.IntPtr constraints);
//   public delegate void SwigDelegatePxSimulationEventCallback_1(global::System.IntPtr actors);
//   public delegate void SwigDelegatePxSimulationEventCallback_2(global::System.IntPtr actors);
//   public delegate void SwigDelegatePxSimulationEventCallback_3(global::System.IntPtr pairHeader, global::System.IntPtr pairs);
//   public delegate void SwigDelegatePxSimulationEventCallback_4(global::System.IntPtr pairs);
//   public delegate void SwigDelegatePxSimulationEventCallback_5(global::System.IntPtr bodyBuffer, global::System.IntPtr poseBuffer);
//
//   private SwigDelegatePxSimulationEventCallback_0 swigDelegate0;
//   private SwigDelegatePxSimulationEventCallback_1 swigDelegate1;
//   private SwigDelegatePxSimulationEventCallback_2 swigDelegate2;
//   private SwigDelegatePxSimulationEventCallback_3 swigDelegate3;
//   private SwigDelegatePxSimulationEventCallback_4 swigDelegate4;
//   private SwigDelegatePxSimulationEventCallback_5 swigDelegate5;
//
//   private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(PxConstraintInfoList) };
//   private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(PxActorList) };
//   private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(PxActorList) };
//   private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(PxContactPairHeader), typeof(PxContactPairList) };
//   private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(PxTriggerPairList) };
//   private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(PxRigidBodyList), typeof(PxTransformList) };
// }
//
// }
